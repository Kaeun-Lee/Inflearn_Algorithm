# 3. 카드 역배치
# 문제 : 1부터 20까지 숫자가 하나씩 쓰인 20장의 카드가 오름차순으로 한 줄로 놓여있음
#        각 카드의 위치는 카드 위에 적힌 숫자와 같이 1부터 20까지로 나타냄
#        이제 다음과 같은 규칙으로 카드의 위치를 바꿈 : 구간[a, b] (단, 1 <= a <= b <= 20)가 주어지면
#        위치 a부터 위치 b까지의 카드를 현재의 역순으로 놓음
#        예를 들어, 구간이 [5, 10]으로 주어진다면, 위치 5부터 위치 10까지의 카드 5, 6, 7, 8, 9, 10을
#        역순으로 하여 10, 9, 8, 7, 6, 5로 놓음
#        이 상태에서 구간 [9, 13]이 다시 주어진다면, 위치 9부터 위치 13까지의 카드 6, 5, 11, 12, 13을
#        역순으로 하여 13, 12, 11, 5, 6으로 놓음
#        1부터 20까지 오름차순으로 놓인 카드들에 대해 10개의 구간이 주어지면, 주어진 구간의 순서대로 뒤집는
#        작업을 연속해서 처리한 뒤 마지막 카드들의 배치를 한 줄에 출력
# 조건 : 총 10개의 줄에 걸쳐 한 줄에 하나씩 10개의 구간이 주어짐
#        i번째 줄에는 i번째 구간의 시작 위치 ai와 끝 위치 bi가 차례대로 주어짐
#        이때 두 값의 범위는 1 <= ai <= bi <= 20임
# 회고 : slicing으로도 해결 가능하지만, idx의 크기를 줄이거나 늘려가며 두 값을 swap할 수 있음

# My_Solution -> 리스트 slicing 활용
import sys

sys.stdin = open("input.txt", "r")
card = [i for i in range(21)]

for _ in range(10):
    s, e = map(int, input().split())
    card[s : e + 1] = card[e : s - 1 : -1]

for x in card[1:]:
    print(x, end=" ")


# Solution_2 -> 두 변수의 값을 swap
a = list(range(21))  # 0 ~ 20까지의 idx를 갖는 리스트 생성

for _ in range(10):
    s, e = map(int, input().split())
    for i in range((e - s + 1) // 2):  # (끝점 - 시작점 + 1) // 2로 swap 횟수를 지정
        a[s + i], a[e - i] = a[e - i], a[s + i]  # 앞과 뒤의 값을 swap

a.pop(0)  # 0번 idx 제거
for x in a:
    print(x, end=" ")


# test_case 1
# section = 5 10
#           9 13
#           1 2
#           3 4
#           5 6
#           1 2
#           3 4
#           5 6
#           1 20
#           1 20
# result : 1 2 3 4 10 9 8 7 13 12 11 5 6 14 15 16 17 18 19 20

# test_case 2
# section = 1 10
#           3 3
#           1 2
#           3 7
#           5 6
#           1 9
#           3 4
#           5 6
#           1 3
#           1 9
# result : 9 10 4 7 5 8 2 3 6 1 11 12 13 14 15 16 17 18 19 20
